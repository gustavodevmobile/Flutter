import 'profissional.dart';

class ProfissionalModel extends Profissional {
  ProfissionalModel({
    String? id,
    required String nome,
    required String email,
    required String senha,
    String? bio,
    required String cpf,
    String? cnpj,
    String? crp,
    String? diplomaPsicanalista,
    String? declSupClinica,
    String? declAnPessoal,
    required String tipoProfissional,
    required bool estaOnline,
    required bool atendePlantao,
    required bool emAtendimento,
    required double valorConsulta,
    required String genero,
    required String foto,
    String? imagemDocumento,
    required String imagemSelfieComDoc,
    DateTime? createdAt,
    String? chavePix,
    String? contaBancaria,
    String? agencia,
    String? banco,
    String? tipoConta,
    String? abordagemPrincipal,
    List<String>? abordagensUtilizadas,
    String? especialidadePrincipal,
    List<String>? temasClinicos,
    String? certificadoEspecializacao,
  }) : super(
          id: id,
          nome: nome,
          email: email,
          senha: senha,
          bio: bio,
          cpf: cpf,
          cnpj: cnpj,
          crp: crp,
          diplomaPsicanalista: diplomaPsicanalista,
          declSupClinica: declSupClinica,
          declAnPessoal: declAnPessoal,
          tipoProfissional: tipoProfissional,
          estaOnline: estaOnline,
          atendePlantao: atendePlantao,
          emAtendimento: emAtendimento,
          valorConsulta: valorConsulta,
          genero: genero,
          foto: foto,
          imagemDocumento: imagemDocumento,
          imagemSelfieComDoc: imagemSelfieComDoc,
          createdAt: createdAt,
          chavePix: chavePix,
          contaBancaria: contaBancaria,
          agencia: agencia,
          banco: banco,
          tipoConta: tipoConta,
          abordagemPrincipal: abordagemPrincipal,
          abordagensUtilizadas: abordagensUtilizadas,
          especialidadePrincipal: especialidadePrincipal,
          temasClinicos: temasClinicos,
          certificadoEspecializacao: certificadoEspecializacao,
        );

  factory ProfissionalModel.fromJson(Map<String, dynamic> json) {
    return ProfissionalModel(
      id: json['id'] as String?,
      nome: json['nome'] ?? '',
      email: json['email'] ?? '',
      senha: json['senha'] ?? '',
      bio: json['bio'] as String?,
      cpf: json['cpf'] ?? '',
      cnpj: json['cnpj'] as String?,
      crp: json['crp'] as String?,
      diplomaPsicanalista: json['diplomaPsicanalista'] as String?,
      declSupClinica: json['declSupClinica'] as String?,
      declAnPessoal: json['declAnPessoal'] as String?,
      tipoProfissional: json['tipoProfissional'] ?? '',
      estaOnline: json['estaOnline'] ?? false,
      atendePlantao: json['atendePlantao'] ?? false,
      emAtendimento: json['emAtendimento'] ?? false,
      valorConsulta: (json['valorConsulta'] is int)
          ? (json['valorConsulta'] as int).toDouble()
          : (json['valorConsulta'] ?? 0.0),
      genero: json['genero'] ?? '',
      foto: json['foto'] ?? '',
      imagemDocumento: json['imagemDocumento'] as String?,
      imagemSelfieComDoc: json['imagemSelfieComDoc'] ?? '',
      createdAt: json['createdAt'] != null
          ? DateTime.tryParse(json['createdAt'])
          : null,
      chavePix: json['chavePix'] as String?,
      contaBancaria: json['contaBancaria'] as String?,
      agencia: json['agencia'] as String?,
      banco: json['banco'] as String?,
      tipoConta: json['tipoConta'] as String?,
      abordagemPrincipal: json['abordagemPrincipal'] as String?,
      abordagensUtilizadas: (json['abordagensUtilizadas'] as List?)
          ?.map((e) => e.toString())
          .toList(),
      especialidadePrincipal: json['especialidadePrincipal'] as String?,
      temasClinicos:
          (json['temasClinicos'] as List?)?.map((e) => e.toString()).toList(),
      certificadoEspecializacao: json['certificadoEspecializacao'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      if (id != null) 'id': id,
      'nome': nome,
      'email': email,
      'senha': senha,
      if (bio != null) 'bio': bio,
      'cpf': cpf,
      if (cnpj != null) 'cnpj': cnpj,
      if (crp != null) 'crp': crp,
      if (diplomaPsicanalista != null)
        'diplomaPsicanalista': diplomaPsicanalista,
      if (declSupClinica != null) 'declSupClinica': declSupClinica,
      if (declAnPessoal != null) 'declAnPessoal': declAnPessoal,
      'tipoProfissional': tipoProfissional,
      'estaOnline': estaOnline,
      'atendePlantao': atendePlantao,
      'emAtendimento': emAtendimento,
      'valorConsulta': valorConsulta,
      'genero': genero,
      'foto': foto,
      if (imagemDocumento != null) 'imagemDocumento': imagemDocumento,
      'imagemSelfieComDoc': imagemSelfieComDoc,
      if (createdAt != null) 'createdAt': createdAt!.toIso8601String(),
      if (chavePix != null) 'chavePix': chavePix,
      if (contaBancaria != null) 'contaBancaria': contaBancaria,
      if (agencia != null) 'agencia': agencia,
      if (banco != null) 'banco': banco,
      if (tipoConta != null) 'tipoConta': tipoConta,
      if (abordagemPrincipal != null) 'abordagemPrincipal': abordagemPrincipal,
      if (abordagensUtilizadas != null)
        'abordagensUtilizadas': abordagensUtilizadas,
      if (especialidadePrincipal != null)
        'especialidadePrincipal': especialidadePrincipal,
      if (temasClinicos != null) 'temasClinicos': temasClinicos,
      if (certificadoEspecializacao != null)
        'certificadoEspecializacao': certificadoEspecializacao,
    };
  }
}
